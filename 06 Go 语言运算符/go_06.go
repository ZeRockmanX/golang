package main // Go 语言运算符

import (
	"fmt"
)

func main() {
	// ----------------------------------------------------------
	/*
		运算符用于在程序运行时执行数学或逻辑运算。
		Go 语言内置的运算符有：
		算术运算符
		关系运算符
		逻辑运算符
		位运算符
		赋值运算符
		其他运算符
		接下来让我们来详细看看各个运算符的介绍。

		算术运算符
		下表列出了所有Go语言的算术运算符。
		假定 A 值为 10，B 值为 20。

		运算符	描述	实例
		+		相加	A + B 输出结果 30
		-		相减	A - B 输出结果 -10
		*		相乘	A * B 输出结果 200
		/		相除	B / A 输出结果 2
		%		求余	B % A 输出结果 0
		++		自增	A++ 输出结果 11
		--		自减	A-- 输出结果 9
		以下实例演示了各个算术运算符的用法：
	*/
	var a1 int = 21
	var b1 int = 10
	var c1 int

	c1 = a1 + b1
	fmt.Printf("第一行 - c1 的值为 %d\n", c1)
	c1 = a1 - b1
	fmt.Printf("第二行 - c1 的值为 %d\n", c1)
	c1 = a1 * b1
	fmt.Printf("第三行 - c1 的值为 %d\n", c1)
	c1 = a1 / b1
	fmt.Printf("第四行 - c1 的值为 %d\n", c1)
	c1 = a1 % b1
	fmt.Printf("第五行 - c1 的值为 %d\n", c1)
	a1++
	fmt.Printf("第六行 - a1 的值为 %d\n", a1)
	a1 = 21 // 为了方便测试，a1 这里重新赋值为 21
	a1--
	fmt.Printf("第七行 - a1 的值为 %d\n", a1)
	/*
		以上实例运行结果：
		第一行 - c1 的值为 31
		第二行 - c1 的值为 11
		第三行 - c1 的值为 210
		第四行 - c1 的值为 2
		第五行 - c1 的值为 1
		第六行 - a1 的值为 22
		第七行 - a1 的值为 20
	*/
	// ----------------------------------------------------------
	/*
		关系运算符
		下表列出了所有Go语言的关系运算符。
		假定 A 值为 10，B 值为 20。

		运算符	描述															实例
		==		检查两个值是否相等，如果相等返回 True 否则返回 False。				(A == B) 为 False
		!=		检查两个值是否不相等，如果不相等返回 True 否则返回 False。			(A != B) 为 True
		>		检查左边值是否大于右边值，如果是返回 True 否则返回 False。			(A > B) 为 False
		<		检查左边值是否小于右边值，如果是返回 True 否则返回 False。			(A < B) 为 True
		>=		检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。		(A >= B) 为 False
		<=		检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。		(A <= B) 为 True
	*/
	var a2 int = 21
	var b2 int = 10
	if a2 == b2 {
		fmt.Printf("第一行 - a2 等于 b2\n")
	} else {
		fmt.Printf("第一行 - a2 不等于 b2\n")
	}
	if a2 < b2 {
		fmt.Printf("第二行 - a2 小于 b2\n")
	} else {
		fmt.Printf("第二行 - a2 不小于 b2\n")
	}
	if a2 > b2 {
		fmt.Printf("第三行 - a2 大于 b2\n")
	} else {
		fmt.Printf("第三行 - a2 不大于 b2\n")
	}
	/* Lets change value of a2 and b2 */
	a2 = 5
	b2 = 20
	if a2 <= b2 {
		fmt.Printf("第四行 - a2 小于等于 b2\n")
	}
	if b2 >= a2 {
		fmt.Printf("第五行 - b2 大于等于 a2\n")
	}
	/*
	   以上实例运行结果：
	   第一行 - a2 不等于 b2
	   第二行 - a2 不小于 b2
	   第三行 - a2 大于 b2
	   第四行 - a2 小于等于 b2
	   第五行 - b2 大于等于 a2
	*/
	// ----------------------------------------------------------
	/*
	   逻辑运算符
	   下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。

	   运算符	描述																		实例
	   &&		逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。		(A && B) 为 False
	   ||		逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。		(A || B) 为 True
	   !		逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。			!(A && B) 为 True
	*/
	var a3 bool = true
	var b3 bool = false
	if a3 && b3 {
		fmt.Printf("第一行 - 条件为 true\n") // 未执行，因为b3为false
	}
	if a3 || b3 {
		fmt.Printf("第二行 - 条件为 true\n")
	}
	/* 修改 a3 和 b3 的值 */
	a3 = false
	b3 = true
	if a3 && b3 {
		fmt.Printf("第三行 - 条件为 true\n") // 未执行，因为a3为false
	} else {
		fmt.Printf("第三行 - 条件为 false\n")
	}
	if !(a3 && b3) {
		fmt.Printf("第四行 - 条件为 true\n")
	}
	/*
		以上实例运行结果：
		第二行 - 条件为 true
		第三行 - 条件为 false
		第四行 - 条件为 true
	*/
	// ----------------------------------------------------------
	/*
		位运算符
		位运算符对整数在内存中的二进制位进行操作。
		下表列出了位运算符 &, |, 和 ^ 的计算：
		p		q		p & q	p | q	p ^ q
		0		0		0		0		0
		0		1		0		1		1
		1		1		1		1		0
		1		0		0		1		1
		假定 A = 60; B = 13; 其二进制数转换为：
		A = 0011 1100
		B = 0000 1101
		-----------------
		A&B = 0000 1100
		A|B = 0011 1101
		A^B = 0011 0001
		Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：
		运算符	描述	实例
		&		按位与运算符"&"是双目运算符。 其功能是参与运算的两数各对应的二进位相与。	(A & B) 结果为 12, 二进制为 0000 1100
		|		按位或运算符"|"是双目运算符。 其功能是参与运算的两数各对应的二进位相或		(A | B) 结果为 61, 二进制为 0011 1101
		^		按位异或运算符"^"是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。	(A ^ B) 结果为 49, 二进制为 0011 0001
		<<		左移运算符"<<"是双目运算符。左移n位就是乘以2的n次方。 其功能把"<<"左边的运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	A << 2 结果为 240 ，二进制为 1111 0000
		>>		右移运算符">>"是双目运算符。右移n位就是除以2的n次方。 其功能是把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数。	A >> 2 结果为 15 ，二进制为 0000 1111
	*/
	var a4 uint = 60 // 60 = 0011 1100
	var b4 uint = 13 // 13 = 0000 1101
	var c4 uint = 0

	c4 = a4 & b4 /* 12 = 0000 1100 */
	fmt.Printf("第一行 - c4 的值为 %d\n", c4)
	c4 = a4 | b4 /* 61 = 0011 1101 */
	fmt.Printf("第二行 - c4 的值为 %d\n", c4)
	c4 = a4 ^ b4 /* 49 = 0011 0001 */
	fmt.Printf("第三行 - c4 的值为 %d\n", c4)
	c4 = a4 << 2 /* 240 = 1111 0000 */
	fmt.Printf("第四行 - c4 的值为 %d\n", c4)
	c4 = a4 >> 2 /* 15 = 0000 1111 */
	fmt.Printf("第五行 - c4 的值为 %d\n", c4)
	/*
		以上实例运行结果：
		第一行 - c4 的值为 12
		第二行 - c4 的值为 61
		第三行 - c4 的值为 49
		第四行 - c4 的值为 240
		第五行 - c4 的值为 15
	*/
	// ----------------------------------------------------------
	/*
	   赋值运算符
	   下表列出了所有Go语言的赋值运算符。

	   运算符	描述										实例
	   =		简单的赋值运算符，将一个表达式的值赋给一个左值	C = A + B 将 A + B 表达式结果赋值给 C
	   +=		相加后再赋值								C += A 等于 C = C + A
	   -=		相减后再赋值								C -= A 等于 C = C - A
	   *=		相乘后再赋值								C *= A 等于 C = C * A
	   /=		相除后再赋值								C /= A 等于 C = C / A
	   %=		求余后再赋值								C %= A 等于 C = C % A
	   <<=		左移后赋值									C <<= 2 等于 C = C << 2
	   >>=		右移后赋值									C >>= 2 等于 C = C >> 2
	   &=		按位与后赋值								C &= 2 等于 C = C & 2
	   ^=		按位异或后赋值								C ^= 2 等于 C = C ^ 2
	   |=		按位或后赋值								C |= 2 等于 C = C | 2
	*/
	var a5 int = 21
	var c5 int

	c5 = a5
	fmt.Printf("第 1 行 - =  运算符实例，c5 值为 = %d\n", c5)
	c5 += a5
	fmt.Printf("第 2 行 - += 运算符实例，c5 值为 = %d\n", c5)
	c5 -= a5
	fmt.Printf("第 3 行 - -= 运算符实例，c5 值为 = %d\n", c5)
	c5 *= a5
	fmt.Printf("第 4 行 - *= 运算符实例，c5 值为 = %d\n", c5)
	c5 /= a5
	fmt.Printf("第 5 行 - /= 运算符实例，c5 值为 = %d\n", c5)
	c5 = 200
	c5 <<= 2
	fmt.Printf("第 6行  - <<= 运算符实例，c5 值为 = %d\n", c5)
	c5 >>= 2
	fmt.Printf("第 7 行 - >>= 运算符实例，c5 值为 = %d\n", c5)
	c5 &= 2
	fmt.Printf("第 8 行 - &= 运算符实例，c5 值为 = %d\n", c5)
	c5 ^= 2
	fmt.Printf("第 9 行 - ^= 运算符实例，c5 值为 = %d\n", c5)
	c5 |= 2
	fmt.Printf("第 10 行 - |= 运算符实例，c5 值为 = %d\n", c5)
	/*
		以上实例运行结果：
		第 1 行 - =  运算符实例，c5 值为 = 21
		第 2 行 - += 运算符实例，c5 值为 = 42
		第 3 行 - -= 运算符实例，c5 值为 = 21
		第 4 行 - *= 运算符实例，c5 值为 = 441
		第 5 行 - /= 运算符实例，c5 值为 = 21
		第 6行  - <<= 运算符实例，c5 值为 = 800
		第 7 行 - >>= 运算符实例，c5 值为 = 200
		第 8 行 - &= 运算符实例，c5 值为 = 0
		第 9 行 - ^= 运算符实例，c5 值为 = 2
		第 10 行 - |= 运算符实例，c5 值为 = 2
	*/
	// ----------------------------------------------------------
	/*
	   其他运算符
	   下表列出了Go语言的其他运算符。

	   运算符	描述	实例
	   &	返回变量存储地址	&a; 将给出变量的实际地址。
	   *	指针变量。	*a; 是一个指针变量
	*/
	var a6 int = 4
	var b6 int32
	var c6 float32
	var ptr6 *int
	/* 运算符实例 */
	// Println :可以打印出字符串，和变量
	// Printf : 只可以打印出格式化的字符串,可以输出字符串类型的变量，不可以输出整形变量和整形
	// 案例见 PrintlnAndPrintf
	fmt.Printf("第 1 行 - a6 变量类型为 = %T\n", a6) //需要打印值的类型，使用 %T。
	fmt.Printf("第 2 行 - b6 变量类型为 = %T\n", b6)
	fmt.Printf("第 3 行 - c6 变量类型为 = %T\n", c6)
	/*  & 和 * 运算符实例 */
	ptr6 = &a6                    // 'ptr' 包含了 'a' 变量的地址
	fmt.Printf("a 的值为  %d\n", a6) //格式化整形数有多种方式，使用 %d进行标准的十进制格式化。
	fmt.Printf("*ptr 为 %d\n", *ptr6)
	/*
		以上实例运行结果：
		第 1 行 - a 变量类型为 = int
		第 2 行 - b 变量类型为 = int32
		第 3 行 - c 变量类型为 = float32
		a 的值为  4
		*ptr 为 4
	*/
	// ----------------------------------------------------------
	/*
	   运算符优先级
	   有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：
	   优先级	运算符
	   5		* / % << >> & &^
	   4		+ - | ^
	   3		== != < <= > >=
	   2		&&
	   1		||
	*/
	var a7 int = 20
	var b7 int = 10
	var c7 int = 15
	var d7 int = 5
	var e7 int
	e7 = (a7 + b7) * c7 / d7 // ( 30 * 15 ) / 5
	fmt.Printf("(a7 + b7) * c7 / d7 的值为 : %d\n", e7)
	e7 = ((a7 + b7) * c7) / d7 // (30 * 15 ) / 5
	fmt.Printf("((a7 + b7) * c7) / d7 的值为  : %d\n", e7)
	e7 = (a7 + b7) * (c7 / d7) // (30) * (15/5)
	fmt.Printf("(a7 + b7) * (c7 / d7) 的值为  : %d\n", e7)
	e7 = a7 + (b7*c7)/d7 //  20 + (150/5)
	fmt.Printf("a7 + (b7 * c7) / d7 的值为  : %d\n", e7)
	/*
		以上实例运行结果：
		(a7 + b7) * c7 / d7 的值为 : 90
		((a7 + b7) * c7) / d7 的值为  : 90
		(a7 + b7) * (c7 / d7) 的值为  : 90
		a7 + (b7 * c7) / d7 的值为  : 50
	*/
	// ----------------------------------------------------------
	// 指针变量 * 和地址值 & 的区别：指针变量保存的是一个地址值，会分配独立的内存来存储一个整型数字。当变量前面有 * 标识时，才等同于 & 的用法，否则会直接输出一个整型数字。
	var a8 int = 4
	var ptr8 *int
	ptr8 = &a8
	println("a8的值为", a8)     // 4
	println("*ptr8为", *ptr8) // 4
	println("ptr8为", ptr8)   // 0x824633794744 内存地址每次随机
	// ----------------------------------------------------------
	// Go 的自增，自减只能作为表达式使用，而不能用于赋值语句。
	var a9 int = 1
	a9++ // 这是允许的，类似 a = a + 1,结果与 a++ 相同
	a9-- //与 a++ 相似
	//a9= a9++ // 这是不允许的，会出现变异错误 syntax error: unexpected ++ at end of statement
	println("a8的值为", a9)
}
